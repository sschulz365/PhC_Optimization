#Sean Billings, 2015
import random
import numpy
import subprocess
from backend import constraints
from backend.experiment import Experiment
from backend.objectiveFunctions import WeightedSumObjectiveFunction, IdealDifferentialObjectiveFunction
import math
from backend.spea_optimizer import SpeaOptimizer
from backend.photonicCrystalDesign import PhCWDesign
from backend.paretoFunctions import ParetoMaxFunction

paramMap = {}
paramMap["s1"] = 0 # First row vertical shift
paramMap["s2"] = 0 # Second row vertical shift
paramMap["s3"] = 0 # Third row vertical shift
#paramMap["p1"] = 0 # First row horizontal shift
#paramMap["p2"] = 0 # Second row horizontal shift
#paramMap["p3"] = 0 # Third row horizontal shift
paramMap["r0"] = 0.3 # Default air-hole radius
paramMap["r1"] = 0.3 # Default first row radius
paramMap["r2"] = 0.3 # Default second row radius
paramMap["r3"] = 0.3 # Default third row radius

# subprocess call attempts to hide the following warning
# that will be ouput in the command prompt
# for some python Development environments
#
# Some deprecated features have been used.  Set the environment
# variable GUILE_WARN_DEPRECATED to "detailed" and rerun the
# program to get more information.  Set it to "no" to suppress
# this message.

#subprocess.call("export GUILE_WARN_DEPRECATED=no", shell = True)

# absolute path to the mpb executable
mpb = "/Users/sean/documents/mpb-1.5/mpb/mpb"

# absolute path to the input ctl
inputFile = "/Users/sean/UniversityOfOttawa/Photonics/PCWO/W1_2D_v04.ctl.txt"

# absolute path to the output ctl
outputFile = "/Users/sean/UniversityOfOttawa/Photonics/PCWO/optimizerTestFile.txt"


# we define a general experiment object
# that we reuse whenever we need to make a command-line mpb call
# see experiment.py for functionality
experiment = Experiment(mpb, inputFile, outputFile)
# ex.setParams(paramVector)
experiment.setCalculationType('4') # accepts an int from 0 to 5
experiment.setBand(23)


# see constraints.py
constraintFunctions = [constraints.latticeConstraintsLD]


pcw = PhCWDesign(paramMap, 0, constraintFunctions)


max_generation = 10 # number of iterations of the DE alg
population_size = 10 # number of solutions to consider in DE
random_update = 0.2 # chance of updating vector fields in DE alg
pareto_archive_size = 7 # number of solutions to store in DE, and use for GD
band = 23 # band of interest for MPB computations
tournament_selection_rate  = 5

#Initialize objective function
#objFunc = IdealDifferentialObjectiveFunction(weights, experiment, ideal)
key_map = {}
key_map["ng0"] = "max"
key_map["loss_at_ng0"] = "min"

pareto_function = ParetoMaxFunction(experiment, key_map)

# Differential Evolution section

print "Starting SPEA"
# DEsolutions is an array of solutions generated by the DE alg

population = SpeaOptimizer.createPopulation(population_size, pcw)

optimizer = SpeaOptimizer(pareto_function)

optimizer.optimize(population,max_generation,tournament_selection_rate, pareto_archive_size)




print "\nSPEA solutions generated"

